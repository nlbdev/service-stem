name: Pull Request Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
      
    - name: Wait for lint workflow
      uses: lewagon/wait-on-check-action@v1.3.1
      with:
        ref: ${{ github.head_ref }}
        check-name: 'lint'
        wait-interval: 10
      continue-on-error: true
      
    - name: Wait for test coverage workflow
      uses: lewagon/wait-on-check-action@v1.3.1
      with:
        ref: ${{ github.head_ref }}
        check-name: 'test-coverage'
        wait-interval: 10
      continue-on-error: true
      
    - name: Check test coverage
      id: coverage
      run: |
        if [ -f "./coverage/coverage-summary.json" ]; then
          COVERAGE=$(node -e "console.log(require('./coverage/coverage-summary.json').total.lines.pct)")
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          if [ $(echo "$COVERAGE < 65" | bc -l) -eq 1 ]; then
            echo "Test coverage is below 65%"
            exit 1
          fi
        else
          echo "coverage=0" >> $GITHUB_OUTPUT
          echo "Coverage file not found"
          exit 1
        fi
      continue-on-error: true
        
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          let coverage = 0;
          let coverageStatus = '❌ Coverage file not found';
          
          try {
            if (fs.existsSync('./coverage/coverage-summary.json')) {
              const coverageData = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
              coverage = coverageData.total.lines.pct;
              coverageStatus = coverage >= 65 ? '✅ Coverage meets requirements' : '⚠️ Coverage is below 65% threshold';
            }
          } catch (error) {
            console.error('Error reading coverage file:', error);
          }
          
          // Get workflow run status for lint and test-coverage workflows
          const [lintRuns, testRuns] = await Promise.all([
            github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'lint.yml',
              head_sha: context.sha,
              per_page: 1
            }),
            github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'test-coverage.yml',
              head_sha: context.sha,
              per_page: 1
            })
          ]);
          
          const lintStatus = lintRuns.data.workflow_runs.length > 0 && lintRuns.data.workflow_runs[0].conclusion === 'success' ? '✅ Passed' : '❌ Failed';
          const testStatus = testRuns.data.workflow_runs.length > 0 && testRuns.data.workflow_runs[0].conclusion === 'success' ? '✅ Passed' : '❌ Failed';
          
          const comment = `## PR Check Results
          
          ${lintStatus} **Linting**
          ${testStatus} **Tests**
          📊 **Coverage**: ${coverage}%
          
          ${coverageStatus}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 